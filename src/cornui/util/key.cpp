#include <unordered_map>
#include <cornui/util/key.h>

std::string toString(const corn::Key& key) {
    static const std::unordered_map<corn::Key, std::string> key2str{
            { corn::Key::ESC, "ESC" },
            { corn::Key::F1, "F1" },
            { corn::Key::F2, "F2" },
            { corn::Key::F3, "F3" },
            { corn::Key::F4, "F4" },
            { corn::Key::F5, "F5" },
            { corn::Key::F6, "F6" },
            { corn::Key::F7, "F7" },
            { corn::Key::F8, "F8" },
            { corn::Key::F9, "F9" },
            { corn::Key::F10, "F10" },
            { corn::Key::F11, "F11" },
            { corn::Key::F12, "F12" },
            { corn::Key::SPACE, "SPACE" },

            { corn::Key::GRAVE, "GRAVE" },
            { corn::Key::K_1, "1" },
            { corn::Key::K_2, "2" },
            { corn::Key::K_3, "3" },
            { corn::Key::K_4, "4" },
            { corn::Key::K_5, "5" },
            { corn::Key::K_6, "6" },
            { corn::Key::K_7, "7" },
            { corn::Key::K_8, "8" },
            { corn::Key::K_9, "9" },
            { corn::Key::K_0, "0" },

            { corn::Key::A, "A" },
            { corn::Key::B, "B" },
            { corn::Key::C, "C" },
            { corn::Key::D, "D" },
            { corn::Key::E, "E" },
            { corn::Key::F, "F" },
            { corn::Key::G, "G" },
            { corn::Key::H, "H" },
            { corn::Key::I, "I" },
            { corn::Key::J, "J" },
            { corn::Key::K, "K" },
            { corn::Key::L, "L" },
            { corn::Key::M, "M" },
            { corn::Key::N, "N" },
            { corn::Key::O, "O" },
            { corn::Key::P, "P" },
            { corn::Key::Q, "Q" },
            { corn::Key::R, "R" },
            { corn::Key::S, "S" },
            { corn::Key::T, "T" },
            { corn::Key::U, "U" },
            { corn::Key::V, "V" },
            { corn::Key::W, "W" },
            { corn::Key::X, "X" },
            { corn::Key::Y, "Y" },
            { corn::Key::Z, "Z" },

            { corn::Key::TAB, "TAB" },
            { corn::Key::CAPS, "CAPS" },
            { corn::Key::LSHIFT, "LSHIFT" },
            { corn::Key::RSHIFT, "RSHIFT" },
            { corn::Key::LCTRL, "LCTRL" },
            { corn::Key::RCTRL, "RCTRL" },
            { corn::Key::LALT, "LALT" },
            { corn::Key::RALT, "RALT" },
            { corn::Key::LSYS, "LSYS" },
            { corn::Key::RSYS, "RSYS" },
            { corn::Key::BACKSPACE, "BACKSPACE" },
            { corn::Key::ENTER, "ENTER" },

            { corn::Key::HYPHEN, "HYPHEN" },
            { corn::Key::EQUAL, "EQUAL" },
            { corn::Key::LBRACKET, "LBRACKET" },
            { corn::Key::RBRACKET, "RBRACKET" },
            { corn::Key::SLASH, "SLASH" },
            { corn::Key::BSLASH, "BSLASH" },
            { corn::Key::COMMA, "COMMA" },
            { corn::Key::PERIOD, "PERIOD" },
            { corn::Key::SEMICOLON, "SEMICOLON" },
            { corn::Key::APOSTROPHE, "APOSTROPHE" },

            { corn::Key::UP, "UP" },
            { corn::Key::DOWN, "DOWN" },
            { corn::Key::LEFT, "LEFT" },
            { corn::Key::RIGHT, "RIGHT" },
            { corn::Key::HOME, "HOME" },
            { corn::Key::END, "END" },
            { corn::Key::INS, "INS" },
            { corn::Key::DEL, "DEL" },
            { corn::Key::PGUP, "PGUP" },
            { corn::Key::PGDOWN, "PGDOWN" },

            { corn::Key::NUM_0, "NUM_0" },
            { corn::Key::NUM_1, "NUM_1" },
            { corn::Key::NUM_2, "NUM_2" },
            { corn::Key::NUM_3, "NUM_3" },
            { corn::Key::NUM_4, "NUM_4" },
            { corn::Key::NUM_5, "NUM_5" },
            { corn::Key::NUM_6, "NUM_6" },
            { corn::Key::NUM_7, "NUM_7" },
            { corn::Key::NUM_8, "NUM_8" },
            { corn::Key::NUM_9, "NUM_9" },
            { corn::Key::NUM_ADD, "NUM_ADD" },
            { corn::Key::NUM_SUB, "NUM_SUB" },
            { corn::Key::NUM_MUL, "NUM_MUL" },
            { corn::Key::NUM_DIV, "NUM_DIV" },

            { corn::Key::NONE, "NONE" },
    };

    return key2str.at(key);
}
